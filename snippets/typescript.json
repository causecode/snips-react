{
    "Saga Test": {
        "prefix": "testsaga",
        "body": [
            "describe('Tests for ${TM_FILENAME/(.*)\\.test.ts/${1}/}', (): void => {",
            "\tbeforeEach((): void => {\n\t\tsagaTester.reset(true);",
            "\t});\n\n\t/**\n\t * Mock doGet to return the response. `yield call(...)` will fail if",
            "\t * the request is not returning any response",
            "\t */\n\tdoGet = jest.fn<Object>()",
            "\t\t.mockImplementationOnce((): Object => {",
            "\t\t\treturn {data: {instanceList: [mockRequestedConnection]}};",
            "\t\t})\n\t\t.mockImplementation((): Object => {",
            "\t\t\treturn {response: {}};\n\t\t});\n",
            "\tdoPut = jest.fn<Object>()",
            "\t\t.mockImplementationOnce((): Object => {",
            "\t\t\treturn {success: true};\n\t\t})",
            "\t\t.mockImplementation((): Object => {",
            "\t\t\treturn {response: {}};\n\t\t});\n",
            "\tconst sagaTester = new SagaTester({",
            "\t\tinitialState: {${1:user: initialState}},",
            "\t\treducers: {${2:connections: connectionReducer}}\n\t});\n",
            "\tit('should check that the state was populated with initialState', (): void => {",
            "\t\texpect(sagaTester.getState()).toEqual({${1:user: initialState}});\n\t});\n",
            "\tunroll('it should test saga for #requestActionType action', async (",
            "\t\t\tdone: () => void,",
            "\t\t\targs: {successActionType: string, requestActionType: string, saga: EnzymePropSelector}",
            "\t): Promise<void> => {\n\t\tsagaTester.start(args.saga);\n",
            "\t\t// Dispatch the event to start the saga",
            "\t\tsagaTester.dispatch(genericActionToInvokeSaga(args.requestActionType));\n",
            "\t\t// Hook into the success action",
            "\t\tawait sagaTester.waitFor(args.successActionType);\n",
            "\t\t// Check that the saga has listened to the dispatched action and the next actions are dispatched",
            "\t\texpect(sagaTester.getLatestCalledAction().type).toEqual(args.successActionType);\n",
            "\t\t// Check that the saga listens to the latest action dispatched",
            "\t\tsagaTester.dispatch(genericActionToInvokeSaga(args.requestActionType));",
            "\t\texpect(sagaTester.numCalled(args.requestActionType)).toEqual(2);\n\n\t\t/**",
            "\t\t * Reset the state and action list, dispatch again",
            "\t\t * and check that it was called\n\t\t */\n\t\tsagaTester.reset(true);",
            "\t\texpect(sagaTester.wasCalled(args.requestActionType)).toEqual(false);",
            "\t\tsagaTester.dispatch(genericActionToInvokeSaga(args.requestActionType));",
            "\t\texpect(sagaTester.wasCalled(args.requestActionType)).toEqual(true);\n",
            "\t\tdone();\n\t}, [ // tslint:disable-next-line",
            "\t\t['successActionType', 'requestActionType', 'saga'],",
            "\t\t[${0}],\n\t\t[],\n\t\t[]\n\t]);\n});\n"
        ],
        "description": "Snippet for testing saga"
    },

    "Print to console": {
        "prefix": "log",
        "body": [
            "console.log(`$1`, $1);"
        ],
        "description": "Log output to console"
    },

    "Unroll for jest": {
        "prefix": "unroll",
        "body": [
            "unroll('it should ${1:test message here}', (",
            "\t\tdone: () => void,",
            "\t\targs: {${2:argument: type}\\}",
            "): void => {",
            "\t${3}",
            "\tdone();",
            "}, [ // tslint:disable-next-line",
            "\t[${0}],",
            "\t[],",
            "\t[],",
            "]);\n"
        ],
        "description": "Snippet for unroll (testing)"
    },

    "Test case for Jest": {
        "prefix": "it",
        "body": [
            "it('should ${1:test message here}', (): void => {",
            "\t${2}",
            "\t${3}",
            "});\n"
        ],
        "description": "Snippet for it (testing)"
    },

    "Describe for jest": {
        "prefix": "describe",
        "body": [
            "describe('Tests for ${1:MODULE NAME}', (): void => {",
            "\t${0}",
            "})"
        ],
        "description": "Snippet for the Jest test suite"
    },

    "Expect to be called": {
        "prefix": "called",
        "body": "expect($1).toBeCalled();"
    },

    "Expect to equal": {
        "prefix": "equal",
        "body": "expect($1).toEqual();"
    },

    "Expect to be truthy": {
        "prefix": "truthy",
        "body": "expect($1).toBeTruthy();"
    },

    "Expect to be falsy": {
        "prefix": "falsy",
        "body": "expect($1).toBeFalsy();"
    }
}
