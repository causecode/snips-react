{
    "Arrow Function": {
        "prefix": "arrow",
        "body": [
            "(${1:arguments}) => ${2:statement}"
        ],
        "description": "Snippet for Arrow Function"
    },

    "Sagas": {
        "prefix": "saga",
        "body": [
            "export function *watch${1:WatcherFunctionName}() {",
            "\tyield takeLatest(${2:REQUEST ACTION}, ${3:workerFunctionName});\n}\n",
            "export function *${3:workerFunctionName}(action: IGenericAction<void>) {",
            "\tlet response = yield call(${4|doGet,doPut,doPost,doDelete|}, '${5:endpoint}', action.successCallback, action.failureCallback);",
            "\tif (${6:CONDITION}) {",
            "\t\tyield put({type: ${7:SUCCESS ACTION}, payload: ${8}});",
            "\t}\n}\n"
        ],
        "description": "Snippet for Saga (watcher & worker)"
    },

    "Common Imports": {
        "prefix": "react",
        "body": [
            "import * as React from 'react';\nimport * as Radium from 'radium';"
        ],
        "description": "Snippet for default import (React & Radium)"
    },

    "Store Dispatch": {
        "prefix": "store",
        "body": [
            "store.dispatch(${1|FUNCTION,genericActionToInvokeSaga(ACTION),genericActionToInvokeSaga(ACTION\\, PAYLOAD)|});"
        ],
        "description": "Snippet for store.dispatch"
    },

    "Unroll for jest": {
        "prefix": "unroll",
        "body": [
            "unroll('it should ${1:test message here}', (",
            "\t\tdone: () => void,",
            "\t\targs: {${2:argument: type}\\}",
            "): void => {",
            "\t${3}",
            "\tdone();",
            "}, [ // tslint:disable-next-line",
            "\t[${0}],",
            "\t[],",
            "\t[],",
            "]);\n"
        ],
        "description": "Snippet for unroll (testing)"
    },

    "Test case for Jest": {
        "prefix": "it",
        "body": [
            "it('should ${1:test message here}', (): void => {",
            "\t${2}",
            "\t${3}",
            "});\n"
        ],
        "description": "Snippet for it (testing)"
    },

    "Describe for jest": {
        "prefix": "describe",
        "body": [
            "describe('Tests for ${1:MODULE NAME}', (): void => {",
            "\t${0}",
            "})"
        ],
        "description": "Snippet for the Jest test suite"
    },

    "Print to console": {
        "prefix": "log",
        "body": [
            "console.log(`$1`, $1);"
        ],
        "description": "Log output to console"
    },
    
    "Link": {
        "prefix": "link",
        "body": "<Link to=\"$1\">$2</Link>",
        "description": "React-router link"
    },

    "Router": {
        "prefix": "router",
        "body": [
            "<ConnectedRouter history={${1:browserHistory}}>",
            "\t<Switch>",
            "\t\t<Route path=\"${2:/}\" component={${3:App}} />",
            "\t</Switch>",
            "</ConnectedRouter>"
        ],
        "description": "React-router"
    },

    "Route": {
        "prefix": "route",
        "body": "<Route path=\"$1\" component={$2}>$3</Route>",
        "description": "React-router Route"
    },

    "Route/": {
        "prefix": "route/",
        "body": "<Route path=\"$1\" component={$2}/>$3",
        "description": "React-router Route"
    },

    "Import react-router": {
        "prefix": "rr",
        "body": "import {${1:Route, Switch}} from 'react-router-dom';"
    },

    "Class": {
        "prefix": "tsclass",
        "body": [
            "import * as React from 'react';",
            "import * as Radium from 'radium';\n",
            "@Radium",
            "export class $1 extends React.Component<void, void> {",
            "\trender(): JSX.Element {",
            "\t\treturn ();",
            "\t}",
            "}\n"
        ]
    },

    "Expect to be called": {
        "prefix": "called",
        "body": "expect($1).toBeCalled();"
    },

    "Expect to equal": {
        "prefix": "equal",
        "body": "expect($1).toEqual();"
    },

    "Expect to be truthy": {
        "prefix": "truthy",
        "body": "expect($1).toBeTruthy();"
    },

    "Expect to be falsy": {
        "prefix": "falsy",
        "body": "expect($1).toBeFalsy();"
    }
}
